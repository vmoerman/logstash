input {
 file {
    path => "/app/tijdelijk/*.log"
   start_position => "beginning"
   }
}

filter {
  grok {
     match => { "message"  => "%{DATA:RowId} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time} %{DATA:Portal} - %{WORD:Call} %{DATA:ProcessName} %{WORD:CallIdX}:%{DATA:CallId} - %{WORD:CallId2X}:%{DATA:RequestId} - %{WORD:CallId3X}:%{DATA:CorrelationId} - %{WORD:CallId4X}:%{DATA:TransactionId} %{WORD:CallIdXX} %{NUMBER:Duration2} %{WORD:UoM}" }
      }
      
      mutate {
      add_field => {
        "timestamp" => "%{year}-%{month}-%{day} %{time}"
      }
      }

      date {
      match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
      target => "businessEventTimestamp"
    }

    mutate {
      convert => {"Duration2" => "integer"}
    }

    mutate {
      remove_field => [ "Call", "CallId2X", "CallId3X", "CallId4X", "CallIdX", "CallIdXX", "year", "month", "day", "time", "timestamp"]
    }


    }



filter {
if [ProcessName] =~ "GetContracts" {
mutate {
replace => [ "ProcessName", "ElkGetAgreement" ]
}
}

if [ProcessName] =~ "GetTransactions" {
mutate {
replace => [ "ProcessName", "ElkGetCustomerTransactions" ]
}
}

if [ProcessName] =~ "GetBankAccounts" {
mutate {
replace => [ "ProcessName", "ElkGetBankAccount" ]
}
}

if [ProcessName] =~ "GetTransactions" {
mutate {
replace => [ "ProcessName", "ElkGetCustomerTransactions" ]
}
}

if [ProcessName] =~ "ValidateBankAccountResponse" {
mutate {
replace => [ "ProcessName", "ElkValidateBankAccount" ]
}
}

if [ProcessName] =~ "CreateContact" {
mutate {
replace => [ "ProcessName", "ElkCreateContact" ]
}
}

if [ProcessName] =~ "CreateMeterReadingRequest" {
mutate {
replace => [ "ProcessName", "ElkCreateMeterReadingRequest" ]
}
}

if [ProcessName] =~ "CreateMoveIn" {
mutate {
replace => [ "ProcessName", "ElkCreateMoveIn" ]
}
}

if [ProcessName] =~ "CreateMoveOut" {
mutate {
replace => [ "ProcessName", "ElkCreateMoveOut" ]
}
}

if [ProcessName] =~ "GetCollectionFile" {
mutate {
replace => [ "ProcessName", "ElkGetCollectionFile" ]
}
}

if [ProcessName] =~ "GetConsumption" {
mutate {
replace => [ "ProcessName", "ElkGetConsumption" ]
}
}


if [ProcessName] =~ "GetCustomerResponse" {
mutate {
replace => [ "ProcessName", "ElkGetCustomerQuote" ]
}
}
# or GetCustomer or both??

if [ProcessName] =~ "GetDocument" {
mutate {
replace => [ "ProcessName", "ElkGetDocument" ]
}
}
# or GetDocumentTypes or both??

if [ProcessName] =~ "GetMeterReadingBoundaries" {
mutate {
replace => [ "ProcessName", "ElkGetMeterReadingBoundaries" ]
}
}

if [ProcessName] =~ "GetMeterRequest" {
mutate {
replace => [ "ProcessName", "ElkGetMeterReadRequest" ]
}
}

if [ProcessName] =~ "GetMoveInPreparation" {
mutate {
replace => [ "ProcessName", "ElkGetMoveInPreparation" ]
}
}

if [ProcessName] =~ "GetMoveOutPreparation" {
mutate {
replace => [ "ProcessName", "ElkGetMoveOutPreparation" ]
}
}

if [ProcessName] =~ "GetOptionList" {
mutate {
replace => [ "ProcessName", "ElkGetOptionLists" ]
}
}

if [ProcessName] =~ "GetUpdateBankAccountResponse" {
mutate {
replace => [ "ProcessName", "ElkUpdateBankAccount" ]
}
}

if [ProcessName] =~ "IsSecurityCodeValid" {
mutate {
replace => [ "ProcessName", "ElkValidateToken" ]
}
}

if [ProcessName] =~ "UpdateContract" {
mutate {
replace => [ "ProcessName", "ElkUpdateAgreement" ]
}
}

if [ProcessName] =~ "UpdateCustomerAddress" {
mutate {
replace => [ "ProcessName", "ElkUpdateCustomer" ]
}
}

if [ProcessName] =~ "UpdateCustomerData" {
mutate {
replace => [ "ProcessName", "ElkUpdateCustomer" ]
}
}

if [ProcessName] =~ "UpdateCustomerDocumentManagement" {
mutate {
replace => [ "ProcessName", "ElkUpdateCustomer" ]
}
}

if [ProcessName] =~ "UserCanLogon" {
mutate {
replace => [ "ProcessName", "ElkValidateCustomer" ]
}
}

if [ProcessName] =~ "ValidateAddress" {
mutate {
replace => [ "ProcessName", "ElkValidateAddress" ]
}
}

if [ProcessName] =~ "ValidateBankAccountResponse" {
mutate {
replace => [ "ProcessName", "ElkValidateBankAccount" ]
}
}

}








output {
   if "_grokparsefailure" in [tags] {
    # write events that didn't match to a file
    file { "path" => "/app/grokerror/grok_failures.txt" }
  } else {
     
  

  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "ftp_source-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
#    document_type => "%{[@metadata][type]}"
 }
  }

}






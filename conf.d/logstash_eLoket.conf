inpusdgpoksdg[sijdg[psdiojs[pdgiojsdpgojsdg]
]


sd
s
dg
dsg
sd
gsd
gt {
  beats {
    port => 3020
  }
}

filter {                                                                                          
  grok {
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{DATA:level}\:\s+%{GREEDYDATA:xml}\. JobId.*" }
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{GREEDYDATA:error_msg}" }
  
  }                                                                                                   
  date {
     match => ["tstamp", "ISO8601"]
  }
  
  date {
     match => ["businessEventTimestamp", "ISO8601"]
  }
 
  mutate {
    gsub => [
      "xml", "&gt;&amp;lt;&amp;gt;", ">"

    ]
  }
 
  mutate {
    gsub => [
      "xml", "&lt;", "<"

    ]
  }
  mutate {
    gsub => [
      "xml","&amp;lt;", "<"

    ]
  }
  mutate {
    gsub => [
      "xml", "&gt;", ">"

    ]
  }
  mutate {
    gsub => [
      "xml","&amp;gt;", ">"

    ]
  }

  mutate {
    gsub => [
      "xml","&amp;#xD;", ">"

    ]
  }


  xml { 
   source => "xml"
   target => "transaction"
  }



# Cleanup of the data #######################################

if [level] == "L3"  {
      drop { }
}

if [level] == "L4"  {
      drop { }
}


##############################################################

# Parsing

 xml {
   source => "xml"
    remove_namespaces => true
    xpath => ["logMessage/logRequest/processStack/text()","businessService"]
    store_xml => false
 }

if [application] =~ "Npt" {
  drop {}
}

if [level] == "L1" and [fields][ProcessName] == "ElkUpdateCustomer" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/documentCollectionId/text()","documentCollectionId",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/emailTo/text()","emailTo",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/printCollectionId/text()","printCollectionId",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/useCustomerEmail/text()","useCustomerEmail",
        "logMessage/logRequest/payload/*/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }



if [level] == "L7" and [fields][ProcessName] == "ElkUpdateCustomer" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/header/attributes/attribute/value/text()","accountNumber",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L1" and [fields][ProcessName] == "ElkGetCustomer" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/body/accountNumber/text()","accountNumber"]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
      }
    }
 }



if [level] == "L7" and [fields][ProcessName] == "ElkGetCustomer" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage",
		    "logMessage/logRequest/payload/Fault/externalError/message/text()","ErrorMessage2",
	    	"logMessage/logRequest/payload/Fault/externalError/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/header/attributes/attribute/value/text()","accountNumber",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L1" and [fields][ServiceType] == "ST3" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

if [level] == "L7" and [fields][ServiceType] == "ST3" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()", "classification",
        "logMessage/logRequest/payload/Fault/header/attributes/attribute/value/text()","accountNumber",
        "logMessage/logRequest/payload/Fault/error/source/application/text()", "application",
        "logMessage/logRequest/payload/Fault/error/message/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage2",
        "logMessage/logRequest/payload/Fault/externalError/message/text()", "ErrorMessage3",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()", "ErrorDetail2",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

 if [level] == "L1" and [fields][ProcessName] == "ElkValidateCustomer" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/elkValidateCustomerRequest/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/elkValidateCustomerRequest/body/node()","businessMessage",
        "logMessage/logRequest/payload/elkValidateCustomerRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

if [level] == "L7" and [fields][ProcessName] == "ElkValidateCustomer" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()", "classification",
        "logMessage/logRequest/payload/Fault/header/attributes/attribute/value/text()","accountNumber",
        "logMessage/logRequest/payload/Fault/error/message/text()", "ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()", "ErrorDetail",
        "logMessage/logRequest/payload/FaultDetails/MsgCode/text()", "ErrorMessage2",
        "logMessage/logRequest/payload/LogRequest/payload/Fault/FaultDetails/Data/text()","ErrorDetail2" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

 if [level] == "L1" and [fields][ProcessName] == "ElkGetBankAccount" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/elkGetBankAccountRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

if [level] == "L7" and [fields][ProcessName] == "ElkGetBankAccount" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/payload/Fault/header/attributes/attribute/value/text()","accountNumber",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/Data/classification/text()", "classification", 
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/Data/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

 if [level] == "L1" and [fields][ProcessName] == "ElkGetMeterReadingBoundaries" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/elkGetMoveInPreparationRequest/body/registerId/text()","registerId",
        "logMessage/logRequest/payload/elkGetMoveInPreparationRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

if [level] == "L7" and [fields][ProcessName] == "ElkGetMeterReadingBoundaries" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/Data/classification/text()", "classification",
        "logMessage/logRequest/payload/Fault/header/attributes/attribute/value/text()","accountNumber",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","ErrorDetail",
        "logMessage/logRequest/payload/logRequest/payload/nptGetMoveInPreparationRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L1" and [fields][ProcessName] == "ElkCreateContact" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/contact/notitionOne/text()","KlantenVraag",
        "logMessage/logRequest/payload/*/body/contact/accountNumber/text()","accountNumber",
        "logMessage/logRequest/payload/*/body/contact/caseCategory/text()","caseCategory",
        "logMessage/logRequest/payload/*/body/contact/caseCategoryTypification/text()","CategoryOmschrijving",
        "logMessage/logRequest/payload/*/body/contact/notificationOne/text()","Notitie1",
        "logMessage/logRequest/payload/*/body/contact/notificationTwo/text()","Notitie2" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

if [level] == "L7" and [fields][ProcessName] == "ElkCreateContact" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()", "classification", 
        "logMessage/logRequest/payload/Fault/header/attributes/attribute/value/text()","accountNumber",
        "logMessage/logRequest/payload/Fault/error/source/application/text()", "application",
        "logMessage/logRequest/payload/Fault/error/message/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage2",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()", "ErrorDetail2",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L6" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/application/text()","application",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
      }
    }
 }


# Cleanup of the data

mutate {
	add_field => {"ProcessName" => "%{[fields][ProcessName]}"}
}


if [level] == "L7" and [classification] == "%{[classification][0]}" {
   mutate {
    remove_field => [ "classification" ]
	}
   mutate {
    add_field => { "classification" => "TECHNICAL" }
  }

}


# Closing bracket of the filters

}

# Rename ElkGetMovePreparation 

  filter {
  if [businessActivity] == "ElkGetMoveOutPreparation_1" {
    mutate {
      replace => {"ProcessName" => "ElkGetMoveOutPreparation"}
      }
    }

  if [businessActivity] == "ElkGetMoveInPreparation_1" {
    mutate {
      replace => {"ProcessName" => "ElkGetMoveInPreparation"}
      }
    }
  }

filter {
  
   date {
      match => ["[businessEventTimestamp]", "ISO8601"]
      target => "[businessEventTimestamp]"
   }

}


#filter {
# if [level] == "L6" {
#  sleep {
#    time => 1
#    replay => true
#  }
# }
#}

# Add Responsetime

filter {
 
 if [level] == "L6" {

 mutate {
     add_field => { "businessTransactionID_quoted" => '"%{[businessTransactionID]}"' }
 }

   elasticsearch {
      hosts => ["localhost"]
      query => "level:L1 AND businessTransactionID:%{[businessTransactionID_quoted]} AND ProcessName:%{[ProcessName]}"
      fields => { "businessEventTimestamp" => "started" }
      user => "elastic"
      password => "W*8hpARFz7tN~v7rhbWT"
      index => "eloket-*"
   }

   date {
      match => ["[started]", "ISO8601"]
      target => "[started]"
   }

 }

if [level] == "L6" and ![started] {
   mutate {
     add_field => { "date_present" => "no" }
   }
#  sleep {
#    time => 0.2
#  }
   elasticsearch {
      hosts => ["localhost"]
      query => "level:L1 AND businessTransactionID:%{[businessTransactionID_quoted]} AND ProcessName:%{[ProcessName]}"
      fields => { "businessEventTimestamp" => "started" }
      user => "elastic"
      password => "W*8hpARFz7tN~v7rhbWT"
      index => "eloket-*"
   }

   date {
      match => ["[started]", "ISO8601"]
      target => "[started]"
   }

}


  mutate {
   remove_field => [ "businessTransactionID_quoted" ]
  }

if [level] == "L6" and [started] {
   ruby {
      code => "event.set('responsetime', (event.get('businessEventTimestamp') - event.get('started')) * 1000)"
   }
 }

  mutate {
    convert => {
      "responsetime" => "integer"
    }
  }
}

# Add second responsetime

 filter {

   if [level] == "L1" {
     aggregate {
       task_id => "%{businessTransactionID}"
       code => "map['businessEventTimestamp3'] = event.get('businessEventTimestamp')"
       map_action => "create"
     }
   }

#   if [logger] == "L6" {
#     aggregate {
#       task_id => "%{businessTransactionID}"
#       code => "map['sql_duration'] += event.get('duration')"
#       map_action => "update"
#     }
#   }

   if [level] == "L6" {
     aggregate {
       task_id => "%{businessTransactionID}"
       code => "event.set('businessEventTimestamp_L1', map['businessEventTimestamp3'])"
       map_action => "update"
       end_of_task => true
       timeout => 120
     }
   }
   mutate {
     add_field => {"testveld" => "autoreloadtest"} 
   }

  mutate {
    add_field => {"testfield" => "testcontent"}
  }
if [level] == "L6" and [businessEventTimestamp_L1] {
   ruby {
      code => "event.set('responsetime_agg', (event.get('businessEventTimestamp') - event.get('businessEventTimestamp_L1')) * 1000)"
   }
 }

 }

#### Make ErrorMessage
filter {

if [level] == "L7" {
  mutate {
        add_field => {"ErrorMessage_raw" => "%{[ErrorMessage]}"}
  }
}


if [level] == "L7" and [ErrorMessage_raw] == "%{[ErrorMessage]}"  {
   mutate {
    add_field => { "ErrorMessage" => "%{[ErrorMessage2]}" }
  }
}

if [level] == "L7" and [ErrorMessage] == "%{[ErrorMessage2]}"  {


   mutate {
    remove_field => [ "ErrorMessage" ]
	}
   mutate {
    add_field => { "ErrorMessage" => "%{[ErrorMessage3]}" }
  }

}


#### Make ErrorDetail

if [level] == "L7" {
  mutate {
        add_field => {"ErrorDetail_raw" => "%{[ErrorDetail]}"}
  }
}


if [level] == "L7" and [ErrorDetail_raw] == "%{[ErrorDetail]}"  {
   mutate {
    add_field => { "ErrorDetail" => "%{[ErrorDetail2]}" }
  }
}

# waardes removed

if [level] == "L7" and [ErrorDetail] == "%{[ErrorDetail2]}"  {


   mutate {
    remove_field => [ "ErrorDetail" ]
        }
   mutate {
    add_field => { "ErrorDetail" => "%{[ErrorMessage]}" }
  }

}

}

# Drop invocation layer

filter {
 if [level] == "L7" and [businessService] =~ "invocation" {
  drop {}
 }
}


filter{
  mutate {
    rename => { "[transaction][jobContext]" => "jobContext"}
    rename => { "[transaction][logRequest]" => "logRequest"}
  }
}

filter {
  mutate {
    remove_field => [ "message", "host", "[transaction][jobContext]", "[transaction][logRequest]", "jobContext", "logRequest", "[transaction][xmlns:tns]", "[transaction][xmlns:tib]", "[transaction][xmlns:bw]", "class", "businessService", "businessSeverity", "thread", "businessApplication", "[transaction][currentTimestamp]", "[fields][ServiceType]", "[fields][ServiceType2]", "[fields][ProcessName]", "log-level", "conversationID", "correlationID", "xml" ]
  }
}

filter {
 if [businessActivity] =~ "Npt" {
  drop {}
 }
}

# Rename technical to functional classification 

filter {

if [ProcessName] == "ElkGetMeterReadRequest"  and [ErrorDetail_raw] =~ "WSELKT012-E001"{
 mutate {
    remove_field => [ "classification" ]
        }
   mutate {  
    add_field => { "classification" => "FUNCTIONAL" }
  }
}

if [ProcessName] == "ElkGetMeterReadRequest"  and [ErrorDetail_raw] =~ "WSELKT012-E005"{
 mutate {
    remove_field => [ "classification" ]
        }
   mutate {  
    add_field => { "classification" => "FUNCTIONAL" }
  }
}
}



output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "eloket-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
#    document_type => "%{[@metadata][type]}"
 }
}






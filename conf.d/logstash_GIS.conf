input {
  beats {
    port => 5042
  }
}

input {
  exec {
    command => "curl -u vmwi.be\\s_tibcotest:UsNQatv3u5 https://t-vmwlerpgis01.vmwitest.be/gisProjectData/Gis_ProjectDataService.svc/GetHeartbeat/test -k"
    interval => 60
    add_field => { "input_type" => "gis_heartbeat"}
  }
}



filter {                                                                                              


###### parsing GIS IIS data

if [fields][project] == "GIS" {


   grok {
     match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp}\s+\[%{NUMBER:duration}]\s+INFO\s+%{DATA:thread}\.%{DATA:project}_%{DATA:service}\s-\s%{DATA:status}\s-\sbusinessTransactionID:\s%{DATA:businessTransactionID}$" }
     match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp}\s+\[%{NUMBER:duration}]\s+ERROR\s+%{DATA:thread}\.%{DATA:project}_%{DATA:service}\s-\s%{DATA:error_type}\s%{GREEDYDATA:error}\s-\sbusinessTransactionID:\s%{DATA:businessTransactionID}$" }
  }
  
# date {
#   match => [ "tstamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
# }
  
# mutate {
#	rename => { "tstamp" => "businessEventTimestamp" }
# }
 
 
 

}

##### Parsing heartbeat

if [input_type] == "gis_heartbeat" {


mutate {
   add_field => {"heartbeat_status" => "%{message}" }
 }

if [message] != "true" {
   mutate {
     replace => {"heartbeat_status" => "false" }
   }
 }

  mutate {
     remove_field => ["host", "command", "message"]
   }

}

##### Parsing TIBCO log messages

if [fields][ProcessName] == "tibco_gis" {

  grok {
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{DATA:level}\:\s+%{GREEDYDATA:xml}\. JobId.*" }
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{GREEDYDATA:error_msg}" }
  
  }                                                                                                   
  date {
     match => ["tstamp", "ISO8601"]
  }
  
  date {
     match => ["businessEventTimestamp", "ISO8601"]
  }
  
  mutate {
    gsub => [
      "xml", "&lt;", "<"

    ]
  }
  mutate {
    gsub => [
      "xml","&amp;lt;", "<"

    ]
  }
  mutate {
    gsub => [
      "xml", "&gt;", ">"

    ]
  }
  mutate {
    gsub => [
      "xml","&amp;gt;", ">"

    ]
  }

  mutate {
    gsub => [
      "xml","&amp;#xD;", ">"

    ]
  }


  xml { 
   source => "xml"
   target => "transaction"
  }

# Parsing the xml message

if [level] != "L7" {
 xml {
 source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
       "//jobContext/businessTransactionID/text()","businessTransactionID",
	   "logMessage/currentTimestamp/text()","businessEventTimestamp",
	   "logMessage/jobContext/correlationID/text()","correlationID",
	   	"//body//projectID/text()","projectID",
	   	"//body/projFase/text()","projectFase",
	   	"//body/projNaam/text()","projectNaam",
	   	"//body/gemeenteOmschrijving/text()","gemeenteOmschrijving",
	   "//jobContext/operation/text()","operation" ]
      store_xml => false
   }

}

if [level] == "L7" {
 xml {
 source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
	   "//jobContext/businessTransactionID/text()","businessTransactionID",
	   "logMessage/currentTimestamp/text()","businessEventTimestamp",
	   "logMessage/jobContext/correlationID/text()","correlationID",
	   "//jobContext/operation/text()","operation",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/*/body/referenceId/text()","referenceId",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
 }

#if [level] == "L7" and [classification] != "FUNCTIONAL" {
#  mutate {
#   add_field => {"classification" => "TECHNICAL"}
#  }
# }

 
mutate {
	remove_field => ["businessMessage", "transaction", "class", "Cronos_PoC" ]
}

if [level] == "L1" {
	mutate {
		add_field => {"status" => "Arrived in ESB"}
 }
} else if [level] == "L3" {
	mutate {
		add_field => {"status" => "Sent to GIS"}
 }
} else if [level] == "L4" {
	mutate {
		add_field => {"status" => "Reply received by GIS"}
 }
} else if [level] == "L6" {
	mutate {
		add_field => {"status" => "ESB transaction completed"}
 }
} else {
	mutate {
		add_field => {"status" => "Error"}
 }
}

}

##### Closing bracket of the filter

}

filter {

if [level] == "L7" and [classification] != "FUNCTIONAL" { 
  mutate {
   add_field => {"classification" => "TECHNICAL"}
  }
 }

if [status] == "Begin transaction" {
  mutate {
   update => {"status" => "Begin transaction GIS"}
  }
}

if [status] == "End transaction" {
  mutate {
   update => {"status" => "End transaction GIS"}
  }
}

}


filter {
 if [level] == "L7" and [businessService] =~ "invoke" {
  drop {}
 }
}


output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "gis-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
#    document_type => "%{[@metadata][type]}"
 }
}






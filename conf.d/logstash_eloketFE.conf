input {
  beats {
    port => 5024
  }
}

filter {                                                                                         
  grok {
    match => { "message"  => '%{NUMBER:pageclick} %{TIMESTAMP_ISO8601:businessEventTimestamp} %{DATA:utility} - Call "%{DATA:ProcessName}" CallId:%{DATA:callerId} - RequestId:%{DATA:requestId} - CorrelationId:%{DATA:correlationId} - TransactionId:%{DATA:businessTransactionID} took %{NUMBER:responsetime} ms' }
  }    
                                                                                               
  date {
     match => ["businessEventTimestamp", "YYYY-MM-dd HH:mm:ss"]
     target => "businessEventTimestamp"
  }
}

# if field "businessEventTimestamp" does not exist, drop the event

filter {
  if ![businessEventTimestamp] {
    drop {}
  }
}

filter {
  mutate {
    remove_field => ["message", "host", "callerId", "correlationId", "requestId", "utility" ]
  }

  mutate {
    convert => {
      "responsetime" => "integer"
    }
  }
}

filter {

  if [ProcessName] == "GetCustomerResponse" {
    mutate {
      replace => {"ProcessName" => "ElkGetCustomer"}
      }
    }

  if [ProcessName] == "UpdateCustomerData" {
    mutate {
      replace => {"ProcessName" => "ElkUpdateCustomer"}
      }
    }

  if [ProcessName] == "GetContracts" {
    mutate {
      replace => {"ProcessName" => "ElkGetAgreement"}
      }
    }

  if [ProcessName] == "GetTransactions" {
    mutate {
      replace => {"ProcessName" => "ElkGetCustomerTransactions"}
      }
    }

  if [ProcessName] == "ValidateBankAccountResponse" {
    mutate {
      replace => {"ProcessName" => "ElkValidateBankAccount"}
      }
    }

  if [ProcessName] == "GetMeterRequest" {
    mutate {
      replace => {"ProcessName" => "ElkGetMeterReadRequest"}
      }
    }

  if [ProcessName] == "GetBankAccounts" {
    mutate {
      replace => {"ProcessName" => "ElkGetBankAccount"}
      }
    }

  if [ProcessName] == "CreateMeterReadingRequest" {
    mutate {
      replace => {"ProcessName" => "ElkCreateMeterReading"}
      }
    }

  if [ProcessName] == "UserCanlogon" {
    mutate {
      replace => {"ProcessName" => "ElkValidateCustomer"}
      }
    }

  if [ProcessName] == "IsSecurityCodeValid" {
    mutate {
      replace => {"ProcessName" => "ElkValidateToken"}
      }
    }

  if [ProcessName] == "GetConsumption" {
    mutate {
      replace => {"ProcessName" => "ElkGetConsumption"}
      }
    }

  if [ProcessName] == "GetMoveInPreparation" {
    mutate {
      replace => {"ProcessName" => "ElkGetMoveInPreparation"}
      }
    }

  if [ProcessName] == "GetMoveOutPreparation" {
    mutate {
      replace => {"ProcessName" => "ElkGetMoveOutPreparation"}
      }
    }

  if [ProcessName] == "CreateMoveIn" {
    mutate {
      replace => {"ProcessName" => "ElkCreateMoveIn"}
      }
    }

  if [ProcessName] == "CreateMoveOut" {
    mutate {
      replace => {"ProcessName" => "ElkCreateMoveOut"}
      }
    }

  if [ProcessName] == "GetCollectionFile" {
    mutate {
      replace => {"ProcessName" => "ElkGetCollectionFile"}
      }
    }

  if [ProcessName] == "CreateContact" {
    mutate {
      replace => {"ProcessName" => "ElkCreateContact"}
      }
    }

  if [ProcessName] == "UpdateContract" {
    mutate {
      replace => {"ProcessName" => "ElkUpdateAgreement"}
      }
    }
}

output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "eloket-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
#    document_type => "%{[@metadata][type]}"
 }
}
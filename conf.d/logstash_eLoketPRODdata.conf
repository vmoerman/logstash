input {
  beats {
    port => 6020
  }
}

filter {                                                                                          
  grok {
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{DATA:level}\:\s+%{GREEDYDATA:xml}\. JobId.*" }
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{GREEDYDATA:error_msg}" }
  
  }                                                                                                   
  date {
     match => ["tstamp", "ISO8601"]
  }
  
  date {
     match => ["businessEventTimestamp", "ISO8601"]
  }
 
  mutate {
    gsub => [
      "xml", "&gt;&amp;lt;&amp;gt;", ">"

    ]
  }
 
  mutate {
    gsub => [
      "xml", "&lt;", "<"

    ]
  }
  mutate {
    gsub => [
      "xml","&amp;lt;", "<"

    ]
  }
  mutate {
    gsub => [
      "xml", "&gt;", ">"

    ]
  }
  mutate {
    gsub => [
      "xml","&amp;gt;", ">"

    ]
  }

  mutate {
    gsub => [
      "xml","&amp;#xD;", ">"

    ]
  }


  xml { 
   source => "xml"
   target => "transaction"
  }



# Cleanup of the data #######################################

if [level] == "L3" and [fields][ServiceType2] == "ST4" {
      drop { }
}

if [level] == "L4" and [fields][ServiceType2] == "ST4" {
      drop { }
}

if [level] == "L1" and [fields][ServiceType] == "Backend"{
    drop { }
}

if [level] == "L6" and [fields][ServiceType] == "Backend"{
    drop { }
}

if [level] == "L7" and [fields][ServiceType] == "Backend"{
    drop { }

}
##############################################################

# Parsing

if [level] == "L1" and [fields][ProcessName] == "ElkUpdateCustomer" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/documentCollectionId/text()","documentCollectionId",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/emailTo/text()","emailTo",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/printCollectionId/text()","printCollectionId",
        "logMessage/logRequest/payload/*/body/changeDocumentManagement/useCustomerEmail/text()","useCustomerEmail",
        "logMessage/logRequest/payload/*/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 



if [level] == "L7" and [fields][ProcessName] == "ElkUpdateCustomer" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/Msg/*/body/accountNumber/text()","accountNumber",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L1" and [fields][ProcessName] == "ElkGetCustomer" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
      }
    }
 } 



if [level] == "L7" and [fields][ProcessName] == "ElkGetCustomer" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage",
		"logMessage/logRequest/payload/Fault/externalError/message/text()","ErrorMessage2",
		"logMessage/logRequest/payload/Fault/externalError/classification/text()","classification",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L1" and [fields][ServiceType] == "ST3" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 

if [level] == "L7" and [fields][ServiceType] == "ST3" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()", "classification", 
        "logMessage/logRequest/payload/Fault/error/source/application/text()", "application",
        "logMessage/logRequest/payload/Fault/error/message/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage2",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()", "ErrorDetail2",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

 if [level] == "L1" and [fields][ProcessName] == "ElkValidateCustomer" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/elkValidateCustomerRequest/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/elkValidateCustomerRequest/body/node()","businessMessage",
        "logMessage/logRequest/payload/elkValidateCustomerRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 

if [level] == "L7" and [fields][ProcessName] == "ElkValidateCustomer" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/Data/JMSSendException/classification/text()", "classification", 
        "logMessage/logRequest/payload/FaultDetails/Data/JMSSendException/msg/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/MsgCode/text()", "ErrorMessage2",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","ErrorDetail",
        "logMessage/logRequest/payload/LogRequest/payload/Fault/FaultDetails/Data/text()","ErrorDetail2" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

 if [level] == "L1" and [fields][ProcessName] == "ElkGetBankAccount" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/elkGetBankAccountRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 

if [level] == "L7" and [fields][ProcessName] == "ElkGetBankAccount" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/Data/classification/text()", "classification", 
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/Data/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

 if [level] == "L1" and [fields][ProcessName] == "ElkGetMeterReadingBoundaries" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/elkGetMoveInPreparationRequest/body/registerId/text()","registerId",
        "logMessage/logRequest/payload/elkGetMoveInPreparationRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 

if [level] == "L7" and [fields][ProcessName] == "ElkGetMeterReadingBoundaries" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/Data/classification/text()", "classification", 
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","ErrorDetail",
        "logMessage/logRequest/payload/logRequest/payload/nptGetMoveInPreparationRequest/body/accountNumber/text()","accountNumber" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L1" and [fields][ProcessName] == "ElkCreateContact" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/contact/accountNumber/text()","accountNumber",
        "logMessage/logRequest/payload/*/body/contact/caseCategory/text()","caseCategory",
        "logMessage/logRequest/payload/*/body/contact/caseCategoryTypification/text()","CategoryOmschrijving",
        "logMessage/logRequest/payload/*/body/contact/notificationOne/text()","Notitie1",
        "logMessage/logRequest/payload/*/body/contact/notificationTwo/text()","Notitie2" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 

if [level] == "L7" and [fields][ProcessName] == "ElkCreateContact" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()", "classification", 
        "logMessage/logRequest/payload/Fault/error/source/application/text()", "application",
        "logMessage/logRequest/payload/Fault/error/message/text()", "ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()", "ErrorMessage2",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()", "ErrorDetail2",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "classification" => "%{[classification][0]}"
      }
    }
 }

if [level] == "L6" and [fields][ServiceType2] == "ST4" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
      }
    }
 } 

if [level] == "L3" and [fields][ServiceType] == "Backend" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
      }
    }
 } 

 if [level] == "L4" and [fields][ServiceType] == "Backend" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
      }
    }
 } 

# Cleanup of the data

mutate {
	add_field => {"ProcessName" => "%{[fields][ProcessName]}"}
}

if [level] == "L7" and [classification] == "%{[classification][0]}" {
   mutate {
    remove_field => [ "classification" ]
	}
   mutate {
    add_field => { "classification" => "TECHNICAL" }
  }

}

# Closing bracket of the filters

}



filter {

#### Make ErrorMessage

if [level] == "L7" {
  mutate {
        add_field => {"ErrorMessage_raw" => "%{[ErrorMessage]}"}
  }
}

if [level] == "L7" and [ErrorMessage_raw] == "%{[ErrorMessage]}"  {
   mutate {
    add_field => { "ErrorMessage" => "%{[ErrorMessage2]}" }
  }
}

#### Make ErrorDetail

if [level] == "L7" {
  mutate {
        add_field => {"ErrorDetail_raw" => "%{[ErrorDetail]}"}
  }
}

if [level] == "L7" and [ErrorDetail_raw] == "%{[ErrorDetail]}"  {
   mutate {
    add_field => { "ErrorDetail2" => "%{[ErrorDetail2]}" }
  }
}

if [level] == "L7" and [ErrorDetail2] == "%{[ErrorDetail2]}"  {
   mutate {
    add_field => { "ErrorDetail" => "%{[ErrorMessage]}" }
  }
}

}

# Drop invocation layer

filter {
 if [level] == "L7" and [businessService] =~ "invocation" {
  drop {}
 }
}







output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "eloketproddata-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
#    document_type => "%{[@metadata][type]}"
 }
}






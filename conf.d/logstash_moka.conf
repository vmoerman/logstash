input {
  beats {
    port => 5044
  }
}

filter {                                                                                          
  grok {
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{DATA:level}\:\s+%{GREEDYDATA:xml}\. JobId.*" }
    match => { "message"  => "%{TIMESTAMP_ISO8601:tstamp} %{LOGLEVEL:log-level}\s+\[%{DATA:thread}\] %{DATA:class}\s+\-\ %{GREEDYDATA:error_msg}" }
  
  }                                                                                                   
  date {
     match => ["tstamp", "ISO8601"]
  }
  
  date {
     match => ["businessEventTimestamp", "ISO8601"]
  }
 
#  mutate {
#    gsub => [
#      "xml", "&gt;&amp;lt;&amp;gt;", ">"
#
#   ]
#  }
 
  mutate {
    gsub => [
      "xml", "&lt;", "<"

    ]
  }
#  mutate {
#    gsub => [
#      "xml","&amp;lt;", "<"
#
#    ]
#  }
  mutate {
    gsub => [
      "xml", "&gt;", ">"

    ]
  }
#  mutate {
#    gsub => [
#      "xml","&amp;gt;", ">"
#
#    ]
#  }

  mutate {
    gsub => [
      "xml","&amp;#xD;", ">"

    ]
  }


  xml { 
   source => "xml"
   target => "transaction"
  }



# Cleanup of the data #######################################

if [level] == "L3" {
    drop { }
}

if [level] == "L4" {
    drop { }
}

if [level] == "L1" and [fields][ProcessName] == "1_ServiceOrders" {
    drop { }
}

if [level] == "L6" and [fields][ServiceType] == "ST1" {
    drop { }
}

if [level] == "L6" and [fields][ServiceType] == "ST2" {
    drop { }
}

##############################################################

# Parsing ST2 

if [level] == "L1" and [fields][ServiceType] == "ST2" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/logRequest/payload/*/body/serviceOrders/serviceOrder/serviceOrderId/text()","serviceOrderID",
        "logMessage/logRequest/payload/*/body/serviceOrderId/text()","serviceOrderID" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
      }
    }
 }


if [level] == "L7" and [fields][ServiceType] == "ST2" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/externalError/classification/text()","classification2",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/externalError/message/text()","ErrorMessage2",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/FaultDetails/Msg/*/body/serviceOrderId/text()","serviceOrderID",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/*/body/serviceOrderID/text()","serviceOrderID2",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/MsgCode/text()","MsgCode",
        "logMessage/logRequest/payload/FaultDetails/Msg/*/body/accountNumber/text()","accountNumber",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication]{0}}"
      }
    }
 }
 

# Parsing GetServiceOrders

  if [level] == "L6" and [fields][ProcessName] == "1_ServiceOrders" {
    xml {
      source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","serviceOrderShort" ]
#        "logMessage/logRequest/payload/*/body/node()","businessMessage" ]
       store_xml => false
     }
    
    mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
#       "serviceOrderID" => "%{[serviceOrderID][0]}"
      }
    }
  }

if [level] == "L7" and [fields][ProcessName] == "1_ServiceOrders" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]

      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

# L1 Parsing GetServiceOrderAttachmentList and GetServiceOrderAttachment

if [level] == "L1" and [fields][ParsingType] == "PT1" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/serviceOrders/serviceOrder/serviceOrderId/text()","serviceOrderID" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

if [level] == "L6" and [fields][ParsingType] == "PT1" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/serviceOrders/serviceOrder/serviceOrderId/text()","serviceOrderID" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

# L7 Parsing GetServiceOrderAttachmentList

if [level] == "L7" and [fields][ProcessName] == "2_GetServiceOrderAttachmentList" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/mkaGetServiceOrderAttachmentListRequest/body/serviceOrders/serviceOrder/serviceOrderID/text()","serviceOrderID",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

# L1 Parsing GetServiceOrderMaterials and GetServiceOrderMaterials and GetCustomer and GetCustomerQuote and GetMeterHistory

if [level] == "L1" and [fields][ParsingType] == "PT2" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/*/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/serviceOrderId/text()","serviceOrderID" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 

# L7 Parsing GetServiceOrderMaterials

if [level] == "L7" and [fields][ProcessName] == "3_GetServiceOrderMaterials" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/FaultDetails/Msg/*/body/serviceOrderId/text()","serviceOrderID",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/mkaGetServiceOrderMaterialsRequest/body/serviceOrderID/text()","serviceOrderID2",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/MsgCode/text()","MsgCode",
        "logMessage/logRequest/payload/FaultDetails/Msg/*/body/accountNumber/text()","accountNumber",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication]{0}}"
      }
    }
 }

# L7 Parsing GetCustomer

if [level] == "L7" and [fields][ProcessName] == "4_GetCustomer" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/Msg/*/body/serviceOrderId/text()","serviceOrderID",
        "logMessage/logRequest/payload/FaultDetails/Msg/*/body/accountNumber/text()","accountNumber",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/mkaGetCustomerRequest/body/accountNumber/serviceOrderID/text()","serviceOrderID2",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

 
# L7 Parsing GetCustomerQuote

if [level] == "L7" and [fields][ProcessName] == "5_GetCustomerQuote" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/eventMessage/text()","eventMessage",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/mkaGetCustomerQuoteRequest/body/serviceOrderID/text()","serviceOrderID",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

# L7 Parsing GetMeterHistory

if [level] == "L7" and [fields][ProcessName] == "6_GetMeterHistory" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/mkaGetMeterHistoryRequest/body/serviceOrderID/text()","serviceOrderID",
        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

 
# L7 Parsing GetServiceOrderAttachement

if [level] == "L7" and [fields][ProcessName] == "7_GetServiceOrderAttachment" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/externalError/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/externalError/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/externalHeader/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 }

# Parsing NotifyEvent

if [level] == "L1" and [fields][ProcessName] == "8_NotifyEvent" {
 xml {
 source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/*/body/node()","businessMessage",
        "logMessage/logRequest/payload/*/body/referenceId/text()","referenceId" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
       "referenceId" => "%{[referenceId][0]}"
      }
    }
 }

if [level] == "L7" and [fields][ProcessName] == "8_NotifyEvent" {
 xml {
 source => "xml"
      remove_namespaces => true
      suppress_empty => false
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
#        "logMessage/logRequest/payload/FaultDetails/StackTrace/nptNotifyEventRequest/body/referenceId/text()","referenceId",
        "logMessage/logRequest/payload/Fault/header/securityContext/securityAttribute/value/text()","serviceOrderID",
#        "logMessage/logRequest/payload/FaultDetails/StackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/Fault/error/stackTrace/text()","StackTrace",
        "logMessage/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage1",
        "logMessage/logRequest/payload/Fault/error/payload/ActivityTimedOutException/msg/text()","ErrorMessage2",
        "logMessage/logRequest/payload/ActivityTimedOutException/msg/text()","ErrorMessage3",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
      }
    }
 }
 
 # L1 Parsing UpdateServiceOrderDate

if [level] == "L1" and [fields][ProcessName] == "UpdateServiceOrderDate" { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaUpdateServiceOrderDateRequest/header/application/text()","businessApplication",
		"logMessage/logRequest/payload/mkaUpdateServiceOrderDateRequest/body/serviceOrderId/text()","serviceOrderID" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing UpdateServiceOrderDate

if [level] == "L7" and [fields][ProcessName] == "UpdateServiceOrderDate" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/logRequest/payload/FaultDetails/Msg/text()","ErrorMessage",
		"logMessage/logRequest/payload/logRequest/payload/FaultDetails/classification/text()","classification",
        "logMessage/logRequest/payload/FaultDetails/Data/JMSSendException/msg/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication]{0}}"
      }
    }
 }

 
 # L1 Parsing GetMessages

if [level] == "L1" and [fields][ProcessName] == "GetMessages" { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaGetMessagesRequest/header/application/text()","businessApplication",
		"logMessage/logRequest/payload/mkaGetMessagesRequest/body/messages/message/messageId/text()","MessageId" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing GetMessages

if [level] == "L7" and [fields][ProcessName] == "GetMessages" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/FaultDetails/Data/JMSSendException/msg/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication]{0}}"
      }
    }
 }

 # L1 Parsing GetPlannedWorkers

if [level] == "L1" and [fields][ProcessName] == "GetPlannedWorkers" { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaGetPlannedWorkersRequest/header/application/text()","businessApplication",
		    "logMessage/logRequest/payload/mkaGetPlannedWorkersRequest/body/workerId/text()","workerId" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing GetPlannedWorkers

if [level] == "L7" and [fields][ProcessName] == "GetPlannedWorkers" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication]{0}}"
      }
    }
 }

 # L1 Parsing GetPlannedServiceOrders

if [level] == "L1" and [fields][ProcessName] == "GetPlannedServiceOrders"  { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaGetPlannedServiceOrdersRequest/header/application/text()","businessApplication",
		    "logMessage/logRequest/payload/mkaGetPlannedServiceOrdersRequest/body/department/text()","department",
		    "logMessage/logRequest/payload/mkaGetPlannedServiceOrdersRequest/body/planningType/text()","planningType",
		    "logMessage/logRequest/payload/mkaGetPlannedServiceOrdersRequest/body/planningDate/text()","planningDate",
		    "logMessage/logRequest/payload/mkaGetPlannedServiceOrdersRequest/body/workerId/text()","workerId",
		    "logMessage/logRequest/payload/mkaGetPlannedServiceOrdersRequest/body/skillTeamId/text()","skillTeamId" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing GetPlannedServiceOrders

if [level] == "L7" and [fields][ProcessName] == "GetPlannedServiceOrders" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication]{0}}"
      }
    }
 } 
 
 # L1 Parsing GetServiceOrderSetup

if [level] == "L1" and [fields][ProcessName] == "GetServiceOrderSetup" { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaGetPlannedWorkersRequest/header/application/text()","businessApplication",
		    "logMessage/logRequest/payload/mkaGetPlannedServiceOrdersRequest/body/workerId/text()","workerId" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing GetServiceOrderSetup

if [level] == "L7" and [fields][ProcessName] == "GetServiceOrderSetup" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/Fault/error/classification/text()","classification",
        "logMessage/logRequest/payload/Fault/error/message/text()","ErrorMessage",
        "logMessage/logRequest/payload/Fault/error/source/application/text()","ErrorApplication",
        "logMessage/logRequest/payload/Fault/error/stackTrace/AifFault/InfologMessageList/InfologMessage/Message/text()","ErrorDetail" ]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication]{0}}"
      }
    }
 } 
 
# L1 Parsing CreateServiceOrderAttachment

if [level] == "L1" and [fields][ProcessName] == "CreateServiceOrderAttachment"  { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaCreateServiceOrderAttachmentRequest/header/application/text()","businessApplication",
		    "logMessage/logRequest/payload/mkaCreateServiceOrderAttachmentRequest/body/serviceOrderId/text()","serviceOrderID",
		    "logMessage/logRequest/payload/mkaCreateServiceOrderAttachmentRequest/body/attachment/name/text()","name",
        "logMessage/logRequest/payload/mkaCreateServiceOrderAttachmentRequest/body/attachment/fileType/text()","fileType",
        "logMessage/logRequest/payload/mkaCreateServiceOrderAttachmentRequest/body/attachment/docuTypeId/text()","docuTypeId",	
        "logMessage/logRequest/payload/mkaCreateServiceOrderAttachmentRequest/body/attachment/createdDateTime/text()","createdDateTime"	]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing CreateServiceOrderAttachment

if [level] == "L7" and [fields][ProcessName] == "CreateServiceOrderAttachment" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/logRequest/payload/FaultDetails/MsgCode/text()","ErrorMessage",
        "logMessage/logRequest/payload/FaultDetails/classification/text()","classifiaction"		]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
      }
    }
 } 

 # L1 Parsing UpdateMessageStatus

if [level] == "L1" and [fields][ProcessName] == "UpdateMessageStatus" { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaUpdateMessageStatusRequest/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/mkaUpdateMessageStatusRequest/body/message/workerId/text()","workerId",
        "logMessage/logRequest/payload/mkaUpdateMessageStatusRequest/body/message/messageId/text()","messageId",
        "logMessage/logRequest/payload/mkaUpdateMessageStatusRequest/body/message/confirmationDateTime/text()","confirmationDateTime"	]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing UpdateMessageStatus not available
if [level] == "L7" and [fields][ProcessName] == "UpdateMessageStatus" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity"	]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
      }
    }
 } 
 
 # L1 Parsing UpdateServiceOrderMaterials

if [level] == "L1" and [fields][ProcessName] == "UpdateServiceOrderMaterials" { 
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity",
        "logMessage/jobContext/operation/text()","businessActivity",
        "logMessage/logRequest/payload/mkaUpdateServiceOrderMaterialsRequest/header/application/text()","businessApplication",
        "logMessage/logRequest/payload/mkaUpdateServiceOrderMaterialsRequest/body/serviceOrderId/text()","serviceOrderID",
        "logMessage/logRequest/payload/mkaUpdateServiceOrderMaterialsRequest/body/itemRequirements/itemRequirement/consumptionDate/text()","consumptionDate",
        "logMessage/logRequest/payload/mkaUpdateServiceOrderMaterialsRequest/body/itemRequirements/itemRequirement/quantity/text()","quantity",
        "logMessage/logRequest/payload/mkaUpdateServiceOrderMaterialsRequest/body/itemRequirements/itemRequirement/itemId/text()","itemId" ]
      store_xml => false
   }  
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
       "businessSeverity" => "%{[businessSeverity][0]}"
       "businessActivity" => "%{[businessActivity][0]}"
       "businessApplication" => "%{[businessApplication][0]}"
      }
    }
 } 
 
# L7 Parsing UpdateServiceOrderMaterials

if [level] == "L7" and [fields][ProcessName] == "UpdateServiceOrderMaterials" {
 xml {
 source => "xml"
      remove_namespaces => true
      xpath => [
        "logMessage/currentTimestamp/text()","businessEventTimestamp",
        "logMessage/jobContext/businessTransactionID/text()","businessTransactionID",
        "logMessage/jobContext/correlationID/text()","correlationID",
        "logMessage/jobContext/conversationID/text()","conversationID",
        "logMessage/logRequest/processStack/text()","businessService",
        "logMessage/logRequest/severity/text()","businessSeverity"	]
      store_xml => false
   }
     mutate {
      replace => {
       "businessEventTimestamp" => "%{[businessEventTimestamp][0]}"
       "businessTransactionID" => "%{[businessTransactionID][0]}"
       "correlationID" => "%{[correlationID][0]}"
       "conversationID" => "%{[conversationID][0]}"
       "businessService" => "%{[businessService][0]}"
      }
    }
 } 

# Cleanup of the data

mutate {
	add_field => {"ProcessName" => "%{[fields][ProcessName]}"}
}

#### Make duplicate field with new name

if [level] == "L7" and [fields][ProcessName] == "8_NotifyEvent" {
mutate {
    add_field => { "serviceOrderID" => "%{[referenceId]}" }
 }
}

if [level] == "L1" and [fields][ProcessName] == "8_NotifyEvent" {
mutate {
    add_field => { "serviceOrderID" => "%{[referenceId]}" }
 }
}


#### Make ErrorMessage

if [level] == "L7" and ![ErrorMessage] {
  mutate {
        add_field => {"ErrorMessage" => "%{[ErrorMessage1]}" }
  }
}

#if [level] == "L7" {
#  mutate {
#        add_field => {"ErrorMessage_raw" => "%{[ErrorMessage]}"}
#  }
#}


#if [level] == "L7" and [ErrorMessage_raw] == "%{[ErrorMessage]}"  {
#   mutate {
#    add_field => { "ErrorMessage" => "%{[ErrorMessage1]}" }
#  }
#}

if [level] == "L7" and [ErrorMessage] == "%{[ErrorMessage1]}"  {


   mutate {
    remove_field => [ "ErrorMessage" ]
	}
   mutate {
    add_field => { "ErrorMessage" => "%{[ErrorMessage2]}" }
  }

}

if [level] == "L7" and [ErrorMessage] == "%{[ErrorMessage2]}"  {


   mutate {
    remove_field => [ "ErrorMessage" ]
        }
   mutate {
    add_field => { "ErrorMessage" => "%{[ErrorMessage3]}" }
  }

}

##### Make ErrorDetail

if [level] == "L7" and ![ErrorDetail] {
  mutate {
        add_field => {"ErrorDetail" => "%{[StackTrace]}" }
  }
}

#if [level] == "L7" {
#  mutate {
#        add_field => {"ErrorDetail_raw" => "%{[ErrorDetail]}"}
#  }
#}
#
#
#if [level] == "L7" and [ErrorDetail_raw] == "%{[ErrorDetail]}"  {
#   mutate {
#    add_field => { "ErrorDetail" => "%{[StackTrace]}" }
#  }
#}
#

if [level] == "L7" and [ErrorDetail] == "%{[StackTrace]}"  {
  
   mutate {
    remove_field => [ "ErrorDetail" ]
	}
   mutate {
    add_field => { "ErrorDetail" => "%{[stackTrace]}" }
  }

}

if [level] == "L7" and [ErrorDetail] == "%{[stackTrace]}"  {


   mutate {
    remove_field => [ "ErrorDetail" ]
        }
   mutate {
    add_field => { "ErrorDetail" => "%{[ErrorMessage]}" }
  }

}

#### Make Classification

if [level] == "L7" and ![classification]{
  mutate {
        add_field => {"classification" => "%{[classification2]}"}
  }
}

#if [level] == "L7" and [classification_raw] == "%{[classification]}" {
#    mutate {
#         add_field => { "classification" => "%{[classification2]}" }
#         }
#}


if [level] == "L7" and [classification] == "%{[classification2]}" {
   mutate {
    remove_field => [ "classification" ]
	}
   mutate {
    add_field => { "classification" => "TECHNICAL" }
  }

}


# Remove unneccecary fields

mutate {
	remove_field => [ "businessMessage", "transaction", "class", "Cronos_PoC", "ErrorMessage_raw", "ErrorDetail_raw", "classification_raw", "fileType", "message"]
}


# Closing bracket of the filter

}

# Drop invocation layers

filter {
 if [level] == "L7" and [businessService] =~ "invocation" {
  drop {}
 }
}

filter {
 if [level] == "L7" and [businessService] =~ "invoke" {
  drop {}
 }
}

filter {
 if [level] == "L6" and [fields][ProcessName] == "1_ServiceOrders" {
  split {
   field => "serviceOrderShort"
  }
  mutate {
        remove_field => [ "message", "xml" ]
  }
 }
}

# Make additional fields GetServiceOrders after split

filter {
 if [level] == "L6" and [fields][ProcessName] == "1_ServiceOrders" {

 xml {
 source => "serviceOrderShort"
      remove_namespaces => true
      xpath => [
        "/serviceOrderShort/serviceOrderId/text()","serviceOrderID",
        "/serviceOrderShort/skillTeams/skillTeam/workers/worker/workerId/text()","workerId",
        "/serviceOrderShort/skillTeams/skillTeam/workers/worker/name/text()","name",
        "/serviceOrderShort/preferredTechnician/relatedTechnicians/worker/workerId/text()","PreferredWorkerId",
        "/serviceOrderShort/preferredTechnician/relatedTechnicians/worker/name/text()","PreferredName",
        "/serviceOrderShort/description/text()","description",
        "/serviceOrderShort/address/city/text()","city",
        "/serviceOrderShort/priority/text()","serviceOrderPriority",
        "/serviceOrderShort/type/text()","serviceOrderType",
        "/serviceOrderShort/address/address/text()","serviceOrderAddress",
        "/serviceOrderShort/plannedDate/text()","serviceOrderPlannedDate",
        "/serviceOrderShort/skillTeams/skillTeam/skillTeamId/text()","skillTeamId"
         ]
      store_xml => false
  }
 }
}

# Drop "empty" serviceorders after split GetServiceOrders


 filter {
  if [serviceOrderShort] =~ "^\n  " {
  drop { }
  }
 }

# Drop "empty" level

 filter {

#This snippet should also drop the event if the level is empty

if ![level] {
  drop {}
}

#if [fields][ServiceType] == "ST2" {
#  mutate {
#        add_field => {"level_raw" => "%{[level]}"}
#  }
#}
#
#if [fields][ServiceType] == "ST2" and [level_raw] == "%{[level]}" {
#   drop { }
#   }
#
#if [fields][ServiceType] == "ST1" {
#  mutate {
#        add_field => {"level_raw" => "%{[level]}"}
#  }
#}
#
#if [fields][ServiceType] == "ST1" and [level_raw] == "%{[level]}" {
#   drop { }
#   }
#
#if [fields][ProcessName] == "1_ServiceOrders" {
#  mutate {
#        add_field => {"level_raw" => "%{[level]}"}
#  }
#}
#
#if [fields][ProcessName] == "1_ServiceOrders" and [level_raw] == "%{[level]}" {
#   drop { }
#   }
}

output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "filebeat-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
 }
}

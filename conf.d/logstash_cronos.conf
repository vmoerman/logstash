#input {
#    azureblob
#    {
#        storage_account_name => "mokaaccexte2emonitoring"
#        storage_access_key => "e00H+0lKkly2JuCzCE+iVtrUY2XZKSer9UyOo/NLc7BSBV+v6VhEiLZKno+hmYlYIQzkBzgYojKtOnDlTefDEw=="
#        container => "e2e-accext"
#        codec => "json"
#        type => "CRONOS"
#        registry_create_policy => "resume"
#   }
#}

input {
  beats {
    port => 5038
  }
}

filter {
 if [fields][Datatype] == "Azuredata" {
  json { source => message }
 }
}

filter {

# if [fields][Datatype] == "Azuredata" {
# Parsing Cronos events
 
if [event][0][name] == "ServiceOrderReceivedTablet" {
	mutate {
		add_field =>
			{"ProcessName" => "10_ServiceOrderReceivedTablet"
			"Cronos_Poc" => "Yes"
		}
	}
}

if [event][0][name] == "ServiceOrderReceivedTablet" {
	mutate {
		add_field => {"serviceOrderID" => "%{[context][custom][dimensions][0][ServiceOrderId]}"}
	}
}

if [event][0][name] == "ServiceOrderReceivedCloud" {
	mutate {
		add_field => {
			"ProcessName" => "9_ServiceOrderReceivedCloud"
			"Cronos_Poc" => "Yes"
		}
	}
}


if [event][0][name] == "ServiceOrderStarted" {
	mutate {
		add_field => {"serviceOrderID" => "%{[context][custom][dimensions][0][ServiceOrder]}"}
	}
}

if [event][0][name] == "ServiceOrderStopped" {
	mutate {
		add_field => {"serviceOrderID" => "%{[context][custom][dimensions][0][ServiceOrder]}"}
	}
}

if [event][0][name] == "StartTravel" {
	mutate {
		add_field => {"serviceOrderID" => "%{[context][custom][dimensions][0][ServiceOrder]}"}
	}
}

if [event][0][name] == "StopTravel" {
	mutate {
		add_field => {"serviceOrderID" => "%{[context][custom][dimensions][0][ServiceOrder]}"}
	}
}

if [event][0][name] == "ServiceOrderNotification" {
	mutate {
		add_field => {
      "serviceOrderID" => "%{[context][custom][dimensions][0][Id]}"
      "ProcessName" => "ServiceOrderNotification"
      }
	}
}


if [event][0][name] == "ServiceOrderReceivedCloud" {
	mutate {
		add_field => {"serviceOrderID" => "%{[context][custom][dimensions][0][ServiceOrderId]}"}
	}
}

if [fields][Datatype] == "Azuredata" {
 mutate {
	add_field => {"businessEventTimestamp" => "%{[context][data][eventTime]}"}
 }
}

mutate {
	remove_field => [ "xml", "businessMessage", "transaction", "class", "Cronos_PoC" ]
}
  
# Closing bracket of the filter
# }
}

filter {
  if [fields][Datatype] == "Knimelog" {

   grok {
    match => { "message"  => "^%{TIMESTAMP_ISO8601:tstamp},%{DATA:Logmessage}:,%{GREEDYDATA:filecount}" }
    match => { "message"  => "^%{TIMESTAMP_ISO8601:tstamp},%{GREEDYDATA:Logmessage}" }
   }

  date {
     match => ["tstamp", "ISO8601"]
	 timezone => "CET"
  }

  mutate {
    convert => {
      "filecount" => "integer"
    }
   }
   
  }
}

filter {
 mutate {
  remove_field => [ "message", "host" ]
 }
}

#
output {

 if [fields][Datatype] == "Azuredata" {

  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "filebeat-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
#    document_type => "%{[@metadata][type]}"
  }
 }

 else {

  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "knime_mon-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "W*8hpARFz7tN~v7rhbWT"
#    document_type => "%{[@metadata][type]}"
  }
 }

}